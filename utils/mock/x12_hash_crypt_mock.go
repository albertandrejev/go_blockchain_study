// Code generated by MockGen. DO NOT EDIT.
// Source: i_x12_hash_crypt.go

// Package utils_mock is a generated GoMock package.
package utils_mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockiX12HashCrypt is a mock of iX12HashCrypt interface
type MockiX12HashCrypt struct {
	ctrl     *gomock.Controller
	recorder *MockiX12HashCryptMockRecorder
}

// MockiX12HashCryptMockRecorder is the mock recorder for MockiX12HashCrypt
type MockiX12HashCryptMockRecorder struct {
	mock *MockiX12HashCrypt
}

// NewMockiX12HashCrypt creates a new mock instance
func NewMockiX12HashCrypt(ctrl *gomock.Controller) *MockiX12HashCrypt {
	mock := &MockiX12HashCrypt{ctrl: ctrl}
	mock.recorder = &MockiX12HashCryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockiX12HashCrypt) EXPECT() *MockiX12HashCryptMockRecorder {
	return m.recorder
}

// X11 mocks base method
func (m *MockiX12HashCrypt) X11(arg0 []byte) []byte {
	ret := m.ctrl.Call(m, "X11", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// X11 indicates an expected call of X11
func (mr *MockiX12HashCryptMockRecorder) X11(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "X11", reflect.TypeOf((*MockiX12HashCrypt)(nil).X11), arg0)
}

// Scrypt mocks base method
func (m *MockiX12HashCrypt) Scrypt(data, salt []byte, N, r, p, keyLen int) ([]byte, error) {
	ret := m.ctrl.Call(m, "Scrypt", data, salt, N, r, p, keyLen)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scrypt indicates an expected call of Scrypt
func (mr *MockiX12HashCryptMockRecorder) Scrypt(data, salt, N, r, p, keyLen interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scrypt", reflect.TypeOf((*MockiX12HashCrypt)(nil).Scrypt), data, salt, N, r, p, keyLen)
}
