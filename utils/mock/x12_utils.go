// Code generated by MockGen. DO NOT EDIT.
// Source: x12.go

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockiHashCrypt is a mock of iHashCrypt interface
type MockiHashCrypt struct {
	ctrl     *gomock.Controller
	recorder *MockiHashCryptMockRecorder
}

// MockiHashCryptMockRecorder is the mock recorder for MockiHashCrypt
type MockiHashCryptMockRecorder struct {
	mock *MockiHashCrypt
}

// NewMockiHashCrypt creates a new mock instance
func NewMockiHashCrypt(ctrl *gomock.Controller) *MockiHashCrypt {
	mock := &MockiHashCrypt{ctrl: ctrl}
	mock.recorder = &MockiHashCryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockiHashCrypt) EXPECT() *MockiHashCryptMockRecorder {
	return m.recorder
}

// X11 mocks base method
func (m *MockiHashCrypt) X11(arg0 []byte) []byte {
	ret := m.ctrl.Call(m, "X11", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// X11 indicates an expected call of X11
func (mr *MockiHashCryptMockRecorder) X11(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "X11", reflect.TypeOf((*MockiHashCrypt)(nil).X11), arg0)
}

// Scrypt mocks base method
func (m *MockiHashCrypt) Scrypt(data, salt []byte, N, r, p, keyLen int) ([]byte, error) {
	ret := m.ctrl.Call(m, "Scrypt", data, salt, N, r, p, keyLen)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scrypt indicates an expected call of Scrypt
func (mr *MockiHashCryptMockRecorder) Scrypt(data, salt, N, r, p, keyLen interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scrypt", reflect.TypeOf((*MockiHashCrypt)(nil).Scrypt), data, salt, N, r, p, keyLen)
}
